import React from 'react';
import '../styles/ServiceModal.css'; 


const UserInfoModal = ({ user, onClose}) => {
  if (!user) return null; // If no user is provided, return null

  return (
    <div className="modal-overlay">
      <div className="modal-content">
        <h2 className='title-modal'> User {user.username} Info:</h2>
        <p><strong>First Name:</strong> {user.name}</p>
        <p><strong>Last Name:</strong> {user.lastname}</p>
        <p><strong>Email:</strong> {user.email}</p>
        <p><strong>Role:</strong> {user.role}</p>
        <p><strong>Country:</strong> {user.address.country}</p>
        <p><strong>City:</strong> {user.address.city}</p>
        <p><strong>Street:</strong> {user.address.street}</p>
        
        <button onClick={onClose}>Close</button>
      </div>
    </div>
  );
};

export default UserInfoModal;






import React, { useState, useEffect } from 'react';
import { updateUser, getUsers, deleteUser } from '../apiService';
import UserInfoModal from './UserInfoModal'; // Assuming the modal is in the same directory

const UpdateUser = () => {
  const [users, setUsers] = useState([]);
  const [message, setMessage] = useState('');
  const [editingUser, setEditingUser] = useState(null); // Holds the user object for the modal

  // Fetch users on component mount
  useEffect(() => {
    const fetchUsers = async () => {
      try {
        const data = await getUsers();
        setUsers(data);
      } catch (error) {
        setMessage(`Error fetching users: ${error.message || 'Unknown error'}`);
      }
    };

    fetchUsers();
  }, []);

  // Handle updates for a specific user
  const handleUpdate = async (updatedUser) => {
    try {
      await updateUser(updatedUser.username, updatedUser);
      setUsers((prevUsers) =>
        prevUsers.map((user) =>
          user.username === updatedUser.username ? updatedUser : user
        )
      );
      setMessage(`User ${updatedUser.username} updated successfully`);
      setEditingUser(null); // Close the modal
    } catch (error) {
      setMessage(`Error updating user ${updatedUser.username}: ${error.message || 'Unknown error'}`);
    }
  };

  // Handle user deletion
  const handleDelete = async (username) => {
    try {
      await deleteUser(username);
      setUsers(users.filter((user) => user.username !== username));
      setMessage(`User ${username} deleted successfully`);
    } catch (error) {
      setMessage(`Error deleting user ${username}: ${error.message || 'Unknown error'}`);
    }
  };

  return (
    <div>
      <h2>Update Users</h2>
      {message && <p>{message}</p>}
      <ul>
        {users.map((user) => (
          <li key={user.username}>
            <strong>{user.name} ({user.username})</strong>
            <div>
              <button onClick={() => setEditingUser(user)}>Update</button>
              <button onClick={() => handleDelete(user.username)}>Delete</button>
            </div>
          </li>
        ))}
      </ul>

      {/* Render the modal only when editingUser is set */}
      {editingUser && (
        <UserInfoModal
          user={editingUser}
          onClose={() => setEditingUser(null)} // Close the modal
          onSave={handleUpdate} // Handle the save operation
        />
      )}
    </div>
  );
};

export default UpdateUser;
